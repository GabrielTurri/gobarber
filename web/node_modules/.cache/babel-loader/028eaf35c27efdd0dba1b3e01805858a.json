{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/turri/www/gobarber/web/src/components/Input/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport { Container, ErrorDiv } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  _s();\n\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    isErrored: !!error,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    children: [Icon && /*#__PURE__*/_jsxDEV(Icon, {\n      size: 20\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onFocus: handleInputFocus,\n      onBlur: handleInputBlur,\n      defaultValue: defaultValue,\n      ref: inputRef,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorDiv, {\n      title: error,\n      children: /*#__PURE__*/_jsxDEV(FiAlertCircle, {\n        color: \"#c53030\",\n        size: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"Ip9WPveULTttGddIPE0vdzs43sI=\", false, function () {\n  return [useField];\n});\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/turri/www/gobarber/web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","Container","ErrorDiv","Input","name","icon","Icon","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AAQA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,cAAzB;AAIA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,UAApC;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,EAAEC,IAAd;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AAAA;;AACrE,QAAMC,QAAQ,GAAGZ,MAAM,CAAmB,IAAnB,CAAvB;AAEA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAM;AAAEgB,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDhB,QAAQ,CAACI,IAAD,CAAlE;AAEA,QAAMa,gBAAgB,GAAGnB,WAAW,CAAC,MAAM;AACzCY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMQ,eAAe,GAAGpB,WAAW,CAAC,MAAM;AAAA;;AACxCY,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACJ,QAAQ,CAACW,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMAzB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,aAAa,CAAC;AACZZ,MAAAA,IAAI,EAAES,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAE,CAAC,CAACD,KAAxB;AAA+B,IAAA,QAAQ,EAAEJ,QAAzC;AAAmD,IAAA,SAAS,EAAEF,SAA9D;AAAA,eACGH,IAAI,iBAAI,QAAC,IAAD;AAAM,MAAA,IAAI,EAAE;AAAZ;AAAA;AAAA;AAAA;AAAA,YADX,eAEE;AACE,MAAA,OAAO,EAAEW,gBADX;AAEE,MAAA,MAAM,EAAEC,eAFV;AAGE,MAAA,YAAY,EAAEJ,YAHhB;AAIE,MAAA,GAAG,EAAEN,QAJP;AAAA,SAKMD;AALN;AAAA;AAAA;AAAA;AAAA,YAFF,EASGQ,KAAK,iBACJ,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAA,6BACE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAC,SAArB;AAA+B,QAAA,IAAI,EAAE;AAArC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA3CD;;GAAMZ,K;UAMsDH,Q;;;KANtDG,K;AA6CN,eAAeA,KAAf","sourcesContent":["import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nimport Tootlip from '../Tooltip/index';\n\nimport { Container, ErrorDiv } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n      {Icon && <Icon size={20} />}\n      <input\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n      {error && (\n        <ErrorDiv title={error}>\n          <FiAlertCircle color=\"#c53030\" size={20} />\n        </ErrorDiv>\n      )}\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}